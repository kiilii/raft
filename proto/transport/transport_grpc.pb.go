// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: transport/transport.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransportServerClient is the client API for TransportServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportServerClient interface {
	RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error)
	AppendEntry(ctx context.Context, in *AppendEntryArgs, opts ...grpc.CallOption) (*AppendEntryReply, error)
}

type transportServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportServerClient(cc grpc.ClientConnInterface) TransportServerClient {
	return &transportServerClient{cc}
}

func (c *transportServerClient) RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error) {
	out := new(RequestVoteReply)
	err := c.cc.Invoke(ctx, "/proto.TransportServer/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportServerClient) AppendEntry(ctx context.Context, in *AppendEntryArgs, opts ...grpc.CallOption) (*AppendEntryReply, error) {
	out := new(AppendEntryReply)
	err := c.cc.Invoke(ctx, "/proto.TransportServer/AppendEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportServerServer is the server API for TransportServer service.
// All implementations must embed UnimplementedTransportServerServer
// for forward compatibility
type TransportServerServer interface {
	RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error)
	AppendEntry(context.Context, *AppendEntryArgs) (*AppendEntryReply, error)
	mustEmbedUnimplementedTransportServerServer()
}

// UnimplementedTransportServerServer must be embedded to have forward compatible implementations.
type UnimplementedTransportServerServer struct {
}

func (UnimplementedTransportServerServer) RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedTransportServerServer) AppendEntry(context.Context, *AppendEntryArgs) (*AppendEntryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntry not implemented")
}
func (UnimplementedTransportServerServer) mustEmbedUnimplementedTransportServerServer() {}

// UnsafeTransportServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportServerServer will
// result in compilation errors.
type UnsafeTransportServerServer interface {
	mustEmbedUnimplementedTransportServerServer()
}

func RegisterTransportServerServer(s grpc.ServiceRegistrar, srv TransportServerServer) {
	s.RegisterService(&TransportServer_ServiceDesc, srv)
}

func _TransportServer_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServerServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TransportServer/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServerServer).RequestVote(ctx, req.(*RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransportServer_AppendEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntryArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServerServer).AppendEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TransportServer/AppendEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServerServer).AppendEntry(ctx, req.(*AppendEntryArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// TransportServer_ServiceDesc is the grpc.ServiceDesc for TransportServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransportServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TransportServer",
	HandlerType: (*TransportServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _TransportServer_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntry",
			Handler:    _TransportServer_AppendEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/transport.proto",
}
